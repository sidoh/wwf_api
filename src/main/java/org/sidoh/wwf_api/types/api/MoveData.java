/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.api;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

/**
 * Encapsulates metadata about a single move. This will represent moves that are
 * included as part of the game state.
 */
public class  MoveData implements org.apache.thrift.TBase<MoveData, MoveData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoveData");

  private static final org.apache.thrift.protocol.TField BOARD_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("boardChecksum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLAY_START_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("playStartPosition", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PLAY_END_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("playEndPosition", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MOVE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("moveIndex", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MOVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("moveType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PROMOTED_FIELD_DESC = new org.apache.thrift.protocol.TField("promoted", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TILES_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MoveDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MoveDataTupleSchemeFactory());
  }

  public int boardChecksum; // required
  public String createdAt; // required
  public Coordinates playStartPosition; // optional
  public Coordinates playEndPosition; // optional
  public long gameId; // required
  public long id; // required
  public int moveIndex; // required
  /**
   * 
   * @see MoveType
   */
  public MoveType moveType; // required
  public int points; // optional
  public int promoted; // optional
  public List<String> words; // required
  public String text; // optional
  /**
   * If the move type was PLAY or SWAP, this will contain a list of tiles that
   * were either played or swapped.
   */
  public List<org.sidoh.wwf_api.types.game_state.Tile> tiles; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOARD_CHECKSUM((short)1, "boardChecksum"),
    CREATED_AT((short)2, "createdAt"),
    PLAY_START_POSITION((short)3, "playStartPosition"),
    PLAY_END_POSITION((short)4, "playEndPosition"),
    GAME_ID((short)5, "gameId"),
    ID((short)6, "id"),
    MOVE_INDEX((short)7, "moveIndex"),
    /**
     * 
     * @see MoveType
     */
    MOVE_TYPE((short)8, "moveType"),
    POINTS((short)9, "points"),
    PROMOTED((short)10, "promoted"),
    WORDS((short)11, "words"),
    TEXT((short)12, "text"),
    /**
     * If the move type was PLAY or SWAP, this will contain a list of tiles that
     * were either played or swapped.
     */
    TILES((short)13, "tiles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOARD_CHECKSUM
          return BOARD_CHECKSUM;
        case 2: // CREATED_AT
          return CREATED_AT;
        case 3: // PLAY_START_POSITION
          return PLAY_START_POSITION;
        case 4: // PLAY_END_POSITION
          return PLAY_END_POSITION;
        case 5: // GAME_ID
          return GAME_ID;
        case 6: // ID
          return ID;
        case 7: // MOVE_INDEX
          return MOVE_INDEX;
        case 8: // MOVE_TYPE
          return MOVE_TYPE;
        case 9: // POINTS
          return POINTS;
        case 10: // PROMOTED
          return PROMOTED;
        case 11: // WORDS
          return WORDS;
        case 12: // TEXT
          return TEXT;
        case 13: // TILES
          return TILES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOARDCHECKSUM_ISSET_ID = 0;
  private static final int __GAMEID_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __MOVEINDEX_ISSET_ID = 3;
  private static final int __POINTS_ISSET_ID = 4;
  private static final int __PROMOTED_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.PLAY_START_POSITION,_Fields.PLAY_END_POSITION,_Fields.POINTS,_Fields.PROMOTED,_Fields.TEXT,_Fields.TILES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOARD_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("boardChecksum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAY_START_POSITION, new org.apache.thrift.meta_data.FieldMetaData("playStartPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coordinates.class)));
    tmpMap.put(_Fields.PLAY_END_POSITION, new org.apache.thrift.meta_data.FieldMetaData("playEndPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coordinates.class)));
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MOVE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("moveIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("moveType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MoveType.class)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROMOTED, new org.apache.thrift.meta_data.FieldMetaData("promoted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TILES, new org.apache.thrift.meta_data.FieldMetaData("tiles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.sidoh.wwf_api.types.game_state.Tile.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoveData.class, metaDataMap);
  }

  public MoveData() {
  }

  public MoveData(
    int boardChecksum,
    String createdAt,
    long gameId,
    long id,
    int moveIndex,
    MoveType moveType,
    List<String> words)
  {
    this();
    this.boardChecksum = boardChecksum;
    setBoardChecksumIsSet(true);
    this.createdAt = createdAt;
    this.gameId = gameId;
    setGameIdIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.moveIndex = moveIndex;
    setMoveIndexIsSet(true);
    this.moveType = moveType;
    this.words = words;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoveData(MoveData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.boardChecksum = other.boardChecksum;
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetPlayStartPosition()) {
      this.playStartPosition = new Coordinates(other.playStartPosition);
    }
    if (other.isSetPlayEndPosition()) {
      this.playEndPosition = new Coordinates(other.playEndPosition);
    }
    this.gameId = other.gameId;
    this.id = other.id;
    this.moveIndex = other.moveIndex;
    if (other.isSetMoveType()) {
      this.moveType = other.moveType;
    }
    this.points = other.points;
    this.promoted = other.promoted;
    if (other.isSetWords()) {
      List<String> __this__words = new ArrayList<String>();
      for (String other_element : other.words) {
        __this__words.add(other_element);
      }
      this.words = __this__words;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetTiles()) {
      List<org.sidoh.wwf_api.types.game_state.Tile> __this__tiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
      for (org.sidoh.wwf_api.types.game_state.Tile other_element : other.tiles) {
        __this__tiles.add(new org.sidoh.wwf_api.types.game_state.Tile(other_element));
      }
      this.tiles = __this__tiles;
    }
  }

  public MoveData deepCopy() {
    return new MoveData(this);
  }

  @Override
  public void clear() {
    setBoardChecksumIsSet(false);
    this.boardChecksum = 0;
    this.createdAt = null;
    this.playStartPosition = null;
    this.playEndPosition = null;
    setGameIdIsSet(false);
    this.gameId = 0;
    setIdIsSet(false);
    this.id = 0;
    setMoveIndexIsSet(false);
    this.moveIndex = 0;
    this.moveType = null;
    setPointsIsSet(false);
    this.points = 0;
    setPromotedIsSet(false);
    this.promoted = 0;
    this.words = null;
    this.text = null;
    this.tiles = null;
  }

  public int getBoardChecksum() {
    return this.boardChecksum;
  }

  public MoveData setBoardChecksum(int boardChecksum) {
    this.boardChecksum = boardChecksum;
    setBoardChecksumIsSet(true);
    return this;
  }

  public void unsetBoardChecksum() {
    __isset_bit_vector.clear(__BOARDCHECKSUM_ISSET_ID);
  }

  /** Returns true if field boardChecksum is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardChecksum() {
    return __isset_bit_vector.get(__BOARDCHECKSUM_ISSET_ID);
  }

  public void setBoardChecksumIsSet(boolean value) {
    __isset_bit_vector.set(__BOARDCHECKSUM_ISSET_ID, value);
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public MoveData setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public Coordinates getPlayStartPosition() {
    return this.playStartPosition;
  }

  public MoveData setPlayStartPosition(Coordinates playStartPosition) {
    this.playStartPosition = playStartPosition;
    return this;
  }

  public void unsetPlayStartPosition() {
    this.playStartPosition = null;
  }

  /** Returns true if field playStartPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayStartPosition() {
    return this.playStartPosition != null;
  }

  public void setPlayStartPositionIsSet(boolean value) {
    if (!value) {
      this.playStartPosition = null;
    }
  }

  public Coordinates getPlayEndPosition() {
    return this.playEndPosition;
  }

  public MoveData setPlayEndPosition(Coordinates playEndPosition) {
    this.playEndPosition = playEndPosition;
    return this;
  }

  public void unsetPlayEndPosition() {
    this.playEndPosition = null;
  }

  /** Returns true if field playEndPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayEndPosition() {
    return this.playEndPosition != null;
  }

  public void setPlayEndPositionIsSet(boolean value) {
    if (!value) {
      this.playEndPosition = null;
    }
  }

  public long getGameId() {
    return this.gameId;
  }

  public MoveData setGameId(long gameId) {
    this.gameId = gameId;
    setGameIdIsSet(true);
    return this;
  }

  public void unsetGameId() {
    __isset_bit_vector.clear(__GAMEID_ISSET_ID);
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return __isset_bit_vector.get(__GAMEID_ISSET_ID);
  }

  public void setGameIdIsSet(boolean value) {
    __isset_bit_vector.set(__GAMEID_ISSET_ID, value);
  }

  public long getId() {
    return this.id;
  }

  public MoveData setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getMoveIndex() {
    return this.moveIndex;
  }

  public MoveData setMoveIndex(int moveIndex) {
    this.moveIndex = moveIndex;
    setMoveIndexIsSet(true);
    return this;
  }

  public void unsetMoveIndex() {
    __isset_bit_vector.clear(__MOVEINDEX_ISSET_ID);
  }

  /** Returns true if field moveIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetMoveIndex() {
    return __isset_bit_vector.get(__MOVEINDEX_ISSET_ID);
  }

  public void setMoveIndexIsSet(boolean value) {
    __isset_bit_vector.set(__MOVEINDEX_ISSET_ID, value);
  }

  /**
   * 
   * @see MoveType
   */
  public MoveType getMoveType() {
    return this.moveType;
  }

  /**
   * 
   * @see MoveType
   */
  public MoveData setMoveType(MoveType moveType) {
    this.moveType = moveType;
    return this;
  }

  public void unsetMoveType() {
    this.moveType = null;
  }

  /** Returns true if field moveType is set (has been assigned a value) and false otherwise */
  public boolean isSetMoveType() {
    return this.moveType != null;
  }

  public void setMoveTypeIsSet(boolean value) {
    if (!value) {
      this.moveType = null;
    }
  }

  public int getPoints() {
    return this.points;
  }

  public MoveData setPoints(int points) {
    this.points = points;
    setPointsIsSet(true);
    return this;
  }

  public void unsetPoints() {
    __isset_bit_vector.clear(__POINTS_ISSET_ID);
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return __isset_bit_vector.get(__POINTS_ISSET_ID);
  }

  public void setPointsIsSet(boolean value) {
    __isset_bit_vector.set(__POINTS_ISSET_ID, value);
  }

  public int getPromoted() {
    return this.promoted;
  }

  public MoveData setPromoted(int promoted) {
    this.promoted = promoted;
    setPromotedIsSet(true);
    return this;
  }

  public void unsetPromoted() {
    __isset_bit_vector.clear(__PROMOTED_ISSET_ID);
  }

  /** Returns true if field promoted is set (has been assigned a value) and false otherwise */
  public boolean isSetPromoted() {
    return __isset_bit_vector.get(__PROMOTED_ISSET_ID);
  }

  public void setPromotedIsSet(boolean value) {
    __isset_bit_vector.set(__PROMOTED_ISSET_ID, value);
  }

  public int getWordsSize() {
    return (this.words == null) ? 0 : this.words.size();
  }

  public java.util.Iterator<String> getWordsIterator() {
    return (this.words == null) ? null : this.words.iterator();
  }

  public void addToWords(String elem) {
    if (this.words == null) {
      this.words = new ArrayList<String>();
    }
    this.words.add(elem);
  }

  public List<String> getWords() {
    return this.words;
  }

  public MoveData setWords(List<String> words) {
    this.words = words;
    return this;
  }

  public void unsetWords() {
    this.words = null;
  }

  /** Returns true if field words is set (has been assigned a value) and false otherwise */
  public boolean isSetWords() {
    return this.words != null;
  }

  public void setWordsIsSet(boolean value) {
    if (!value) {
      this.words = null;
    }
  }

  public String getText() {
    return this.text;
  }

  public MoveData setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public int getTilesSize() {
    return (this.tiles == null) ? 0 : this.tiles.size();
  }

  public java.util.Iterator<org.sidoh.wwf_api.types.game_state.Tile> getTilesIterator() {
    return (this.tiles == null) ? null : this.tiles.iterator();
  }

  public void addToTiles(org.sidoh.wwf_api.types.game_state.Tile elem) {
    if (this.tiles == null) {
      this.tiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
    }
    this.tiles.add(elem);
  }

  /**
   * If the move type was PLAY or SWAP, this will contain a list of tiles that
   * were either played or swapped.
   */
  public List<org.sidoh.wwf_api.types.game_state.Tile> getTiles() {
    return this.tiles;
  }

  /**
   * If the move type was PLAY or SWAP, this will contain a list of tiles that
   * were either played or swapped.
   */
  public MoveData setTiles(List<org.sidoh.wwf_api.types.game_state.Tile> tiles) {
    this.tiles = tiles;
    return this;
  }

  public void unsetTiles() {
    this.tiles = null;
  }

  /** Returns true if field tiles is set (has been assigned a value) and false otherwise */
  public boolean isSetTiles() {
    return this.tiles != null;
  }

  public void setTilesIsSet(boolean value) {
    if (!value) {
      this.tiles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOARD_CHECKSUM:
      if (value == null) {
        unsetBoardChecksum();
      } else {
        setBoardChecksum((Integer)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case PLAY_START_POSITION:
      if (value == null) {
        unsetPlayStartPosition();
      } else {
        setPlayStartPosition((Coordinates)value);
      }
      break;

    case PLAY_END_POSITION:
      if (value == null) {
        unsetPlayEndPosition();
      } else {
        setPlayEndPosition((Coordinates)value);
      }
      break;

    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MOVE_INDEX:
      if (value == null) {
        unsetMoveIndex();
      } else {
        setMoveIndex((Integer)value);
      }
      break;

    case MOVE_TYPE:
      if (value == null) {
        unsetMoveType();
      } else {
        setMoveType((MoveType)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Integer)value);
      }
      break;

    case PROMOTED:
      if (value == null) {
        unsetPromoted();
      } else {
        setPromoted((Integer)value);
      }
      break;

    case WORDS:
      if (value == null) {
        unsetWords();
      } else {
        setWords((List<String>)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case TILES:
      if (value == null) {
        unsetTiles();
      } else {
        setTiles((List<org.sidoh.wwf_api.types.game_state.Tile>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOARD_CHECKSUM:
      return Integer.valueOf(getBoardChecksum());

    case CREATED_AT:
      return getCreatedAt();

    case PLAY_START_POSITION:
      return getPlayStartPosition();

    case PLAY_END_POSITION:
      return getPlayEndPosition();

    case GAME_ID:
      return Long.valueOf(getGameId());

    case ID:
      return Long.valueOf(getId());

    case MOVE_INDEX:
      return Integer.valueOf(getMoveIndex());

    case MOVE_TYPE:
      return getMoveType();

    case POINTS:
      return Integer.valueOf(getPoints());

    case PROMOTED:
      return Integer.valueOf(getPromoted());

    case WORDS:
      return getWords();

    case TEXT:
      return getText();

    case TILES:
      return getTiles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOARD_CHECKSUM:
      return isSetBoardChecksum();
    case CREATED_AT:
      return isSetCreatedAt();
    case PLAY_START_POSITION:
      return isSetPlayStartPosition();
    case PLAY_END_POSITION:
      return isSetPlayEndPosition();
    case GAME_ID:
      return isSetGameId();
    case ID:
      return isSetId();
    case MOVE_INDEX:
      return isSetMoveIndex();
    case MOVE_TYPE:
      return isSetMoveType();
    case POINTS:
      return isSetPoints();
    case PROMOTED:
      return isSetPromoted();
    case WORDS:
      return isSetWords();
    case TEXT:
      return isSetText();
    case TILES:
      return isSetTiles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoveData)
      return this.equals((MoveData)that);
    return false;
  }

  public boolean equals(MoveData that) {
    if (that == null)
      return false;

    boolean this_present_boardChecksum = true;
    boolean that_present_boardChecksum = true;
    if (this_present_boardChecksum || that_present_boardChecksum) {
      if (!(this_present_boardChecksum && that_present_boardChecksum))
        return false;
      if (this.boardChecksum != that.boardChecksum)
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_playStartPosition = true && this.isSetPlayStartPosition();
    boolean that_present_playStartPosition = true && that.isSetPlayStartPosition();
    if (this_present_playStartPosition || that_present_playStartPosition) {
      if (!(this_present_playStartPosition && that_present_playStartPosition))
        return false;
      if (!this.playStartPosition.equals(that.playStartPosition))
        return false;
    }

    boolean this_present_playEndPosition = true && this.isSetPlayEndPosition();
    boolean that_present_playEndPosition = true && that.isSetPlayEndPosition();
    if (this_present_playEndPosition || that_present_playEndPosition) {
      if (!(this_present_playEndPosition && that_present_playEndPosition))
        return false;
      if (!this.playEndPosition.equals(that.playEndPosition))
        return false;
    }

    boolean this_present_gameId = true;
    boolean that_present_gameId = true;
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (this.gameId != that.gameId)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_moveIndex = true;
    boolean that_present_moveIndex = true;
    if (this_present_moveIndex || that_present_moveIndex) {
      if (!(this_present_moveIndex && that_present_moveIndex))
        return false;
      if (this.moveIndex != that.moveIndex)
        return false;
    }

    boolean this_present_moveType = true && this.isSetMoveType();
    boolean that_present_moveType = true && that.isSetMoveType();
    if (this_present_moveType || that_present_moveType) {
      if (!(this_present_moveType && that_present_moveType))
        return false;
      if (!this.moveType.equals(that.moveType))
        return false;
    }

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (this.points != that.points)
        return false;
    }

    boolean this_present_promoted = true && this.isSetPromoted();
    boolean that_present_promoted = true && that.isSetPromoted();
    if (this_present_promoted || that_present_promoted) {
      if (!(this_present_promoted && that_present_promoted))
        return false;
      if (this.promoted != that.promoted)
        return false;
    }

    boolean this_present_words = true && this.isSetWords();
    boolean that_present_words = true && that.isSetWords();
    if (this_present_words || that_present_words) {
      if (!(this_present_words && that_present_words))
        return false;
      if (!this.words.equals(that.words))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_tiles = true && this.isSetTiles();
    boolean that_present_tiles = true && that.isSetTiles();
    if (this_present_tiles || that_present_tiles) {
      if (!(this_present_tiles && that_present_tiles))
        return false;
      if (!this.tiles.equals(that.tiles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MoveData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MoveData typedOther = (MoveData)other;

    lastComparison = Boolean.valueOf(isSetBoardChecksum()).compareTo(typedOther.isSetBoardChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boardChecksum, typedOther.boardChecksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayStartPosition()).compareTo(typedOther.isSetPlayStartPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayStartPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playStartPosition, typedOther.playStartPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayEndPosition()).compareTo(typedOther.isSetPlayEndPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayEndPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playEndPosition, typedOther.playEndPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameId()).compareTo(typedOther.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, typedOther.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoveIndex()).compareTo(typedOther.isSetMoveIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoveIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moveIndex, typedOther.moveIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoveType()).compareTo(typedOther.isSetMoveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moveType, typedOther.moveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(typedOther.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, typedOther.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromoted()).compareTo(typedOther.isSetPromoted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromoted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promoted, typedOther.promoted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWords()).compareTo(typedOther.isSetWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, typedOther.words);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiles()).compareTo(typedOther.isSetTiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles, typedOther.tiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoveData(");
    boolean first = true;

    sb.append("boardChecksum:");
    sb.append(this.boardChecksum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (isSetPlayStartPosition()) {
      if (!first) sb.append(", ");
      sb.append("playStartPosition:");
      if (this.playStartPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.playStartPosition);
      }
      first = false;
    }
    if (isSetPlayEndPosition()) {
      if (!first) sb.append(", ");
      sb.append("playEndPosition:");
      if (this.playEndPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.playEndPosition);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("gameId:");
    sb.append(this.gameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moveIndex:");
    sb.append(this.moveIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moveType:");
    if (this.moveType == null) {
      sb.append("null");
    } else {
      sb.append(this.moveType);
    }
    first = false;
    if (isSetPoints()) {
      if (!first) sb.append(", ");
      sb.append("points:");
      sb.append(this.points);
      first = false;
    }
    if (isSetPromoted()) {
      if (!first) sb.append(", ");
      sb.append("promoted:");
      sb.append(this.promoted);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("words:");
    if (this.words == null) {
      sb.append("null");
    } else {
      sb.append(this.words);
    }
    first = false;
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetTiles()) {
      if (!first) sb.append(", ");
      sb.append("tiles:");
      if (this.tiles == null) {
        sb.append("null");
      } else {
        sb.append(this.tiles);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'boardChecksum' because it's a primitive and you chose the non-beans generator.
    if (createdAt == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'gameId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'moveIndex' because it's a primitive and you chose the non-beans generator.
    if (moveType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'moveType' was not present! Struct: " + toString());
    }
    if (words == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'words' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MoveDataStandardSchemeFactory implements SchemeFactory {
    public MoveDataStandardScheme getScheme() {
      return new MoveDataStandardScheme();
    }
  }

  private static class MoveDataStandardScheme extends StandardScheme<MoveData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MoveData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOARD_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.boardChecksum = iprot.readI32();
              struct.setBoardChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAY_START_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playStartPosition = new Coordinates();
              struct.playStartPosition.read(iprot);
              struct.setPlayStartPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAY_END_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playEndPosition = new Coordinates();
              struct.playEndPosition.read(iprot);
              struct.setPlayEndPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameId = iprot.readI64();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOVE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.moveIndex = iprot.readI32();
              struct.setMoveIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MOVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.moveType = MoveType.findByValue(iprot.readI32());
              struct.setMoveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.points = iprot.readI32();
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROMOTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.promoted = iprot.readI32();
              struct.setPromotedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.words = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.words.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.tiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  org.sidoh.wwf_api.types.game_state.Tile _elem5; // required
                  _elem5 = new org.sidoh.wwf_api.types.game_state.Tile();
                  _elem5.read(iprot);
                  struct.tiles.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setTilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBoardChecksum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'boardChecksum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGameId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMoveIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'moveIndex' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MoveData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOARD_CHECKSUM_FIELD_DESC);
      oprot.writeI32(struct.boardChecksum);
      oprot.writeFieldEnd();
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.playStartPosition != null) {
        if (struct.isSetPlayStartPosition()) {
          oprot.writeFieldBegin(PLAY_START_POSITION_FIELD_DESC);
          struct.playStartPosition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.playEndPosition != null) {
        if (struct.isSetPlayEndPosition()) {
          oprot.writeFieldBegin(PLAY_END_POSITION_FIELD_DESC);
          struct.playEndPosition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
      oprot.writeI64(struct.gameId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOVE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.moveIndex);
      oprot.writeFieldEnd();
      if (struct.moveType != null) {
        oprot.writeFieldBegin(MOVE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.moveType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoints()) {
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeI32(struct.points);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPromoted()) {
        oprot.writeFieldBegin(PROMOTED_FIELD_DESC);
        oprot.writeI32(struct.promoted);
        oprot.writeFieldEnd();
      }
      if (struct.words != null) {
        oprot.writeFieldBegin(WORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
          for (String _iter6 : struct.words)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tiles != null) {
        if (struct.isSetTiles()) {
          oprot.writeFieldBegin(TILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tiles.size()));
            for (org.sidoh.wwf_api.types.game_state.Tile _iter7 : struct.tiles)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MoveDataTupleSchemeFactory implements SchemeFactory {
    public MoveDataTupleScheme getScheme() {
      return new MoveDataTupleScheme();
    }
  }

  private static class MoveDataTupleScheme extends TupleScheme<MoveData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MoveData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.boardChecksum);
      oprot.writeString(struct.createdAt);
      oprot.writeI64(struct.gameId);
      oprot.writeI64(struct.id);
      oprot.writeI32(struct.moveIndex);
      oprot.writeI32(struct.moveType.getValue());
      {
        oprot.writeI32(struct.words.size());
        for (String _iter8 : struct.words)
        {
          oprot.writeString(_iter8);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPlayStartPosition()) {
        optionals.set(0);
      }
      if (struct.isSetPlayEndPosition()) {
        optionals.set(1);
      }
      if (struct.isSetPoints()) {
        optionals.set(2);
      }
      if (struct.isSetPromoted()) {
        optionals.set(3);
      }
      if (struct.isSetText()) {
        optionals.set(4);
      }
      if (struct.isSetTiles()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPlayStartPosition()) {
        struct.playStartPosition.write(oprot);
      }
      if (struct.isSetPlayEndPosition()) {
        struct.playEndPosition.write(oprot);
      }
      if (struct.isSetPoints()) {
        oprot.writeI32(struct.points);
      }
      if (struct.isSetPromoted()) {
        oprot.writeI32(struct.promoted);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetTiles()) {
        {
          oprot.writeI32(struct.tiles.size());
          for (org.sidoh.wwf_api.types.game_state.Tile _iter9 : struct.tiles)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MoveData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.boardChecksum = iprot.readI32();
      struct.setBoardChecksumIsSet(true);
      struct.createdAt = iprot.readString();
      struct.setCreatedAtIsSet(true);
      struct.gameId = iprot.readI64();
      struct.setGameIdIsSet(true);
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.moveIndex = iprot.readI32();
      struct.setMoveIndexIsSet(true);
      struct.moveType = MoveType.findByValue(iprot.readI32());
      struct.setMoveTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.words = new ArrayList<String>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          String _elem12; // required
          _elem12 = iprot.readString();
          struct.words.add(_elem12);
        }
      }
      struct.setWordsIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.playStartPosition = new Coordinates();
        struct.playStartPosition.read(iprot);
        struct.setPlayStartPositionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.playEndPosition = new Coordinates();
        struct.playEndPosition.read(iprot);
        struct.setPlayEndPositionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.points = iprot.readI32();
        struct.setPointsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.promoted = iprot.readI32();
        struct.setPromotedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            org.sidoh.wwf_api.types.game_state.Tile _elem15; // required
            _elem15 = new org.sidoh.wwf_api.types.game_state.Tile();
            _elem15.read(iprot);
            struct.tiles.add(_elem15);
          }
        }
        struct.setTilesIsSet(true);
      }
    }
  }

}

